#!/usr/bin/env bash

# Check format to ensure it is a public key
is_public_key() {
    local key="$1"

    if [[ -z "$key" ]]; then
        return 1
    fi
    if [[ "$key" =~ ^ssh-(rsa|ed25519|ecdsa|dsa)\ [A-Za-z0-9+/]+=*(\ .*)?$ ]]; then
        return 0
    fi
    return 1
}

# Add public key to authorized_keys
function add_public_key() {
  local public_key=$1
  local authorized_keys_file=~/.ssh/authorized_keys

  if [[ ! -d ~/.ssh ]]; then
    mkdir ~/.ssh || return 1
  fi
  if [[ ! -f $authorized_keys_file ]]; then
    touch $authorized_keys_file || return 1
  fi

  # Ensure the file ends with a newline
  [[ -s $authorized_keys_file && $(tail -c1 "$authorized_keys_file") != $'\n' ]] && echo "" >>"$authorized_keys_file"
  # Append key
  echo "$public_key" >>"$authorized_keys_file" || return 1
}

# help message
function help() {
  echo "Add public key to authorized_keys"
  echo ""
  echo "Usage: $0 \"<public_key>\""
}

RED="\033[31m"
GREEN="\033[32m"
RESET="\033[0m"

# check $1 is -h/--help
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  help
  exit 0
fi

# Check parameter $1 format and add public key. Raise error if failed.
is_public_key "$1"
if [[ ! $? -eq 0 ]]; then
  echo -e "${RED}${BOLD}[!] ERROR: Invalid public key: \"${1}\"${RESET}"
  echo ""
  help
  exit 1
fi

add_public_key "$1"
echo -e "${GREEN}${BOLD}[*] SUCCESS: Public key added!${RESET}"
