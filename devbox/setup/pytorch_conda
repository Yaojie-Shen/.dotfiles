#!/usr/bin/env bash

# Define PyTorch versions, torchvision, torchaudio, and corresponding CUDA versions
declare -A TORCH_CONFIGS
TORCH_CONFIGS["2.5.0"]="0.20.0:2.5.0 11.8 12.1 12.4 cpuonly"
TORCH_CONFIGS["2.4.1"]="0.19.1:2.4.1 11.8 12.1 12.4 cpuonly"
TORCH_CONFIGS["2.4.0"]="0.19.0:2.4.0 11.8 12.1 12.4 cpuonly"
TORCH_CONFIGS["2.3.1"]="0.18.1:2.3.1 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.3.0"]="0.18.0:2.3.0 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.2.2"]="0.17.2:2.2.2 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.2.1"]="0.17.1:2.2.1 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.2.0"]="0.17.0:2.2.0 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.1.2"]="0.16.2:2.1.2 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.1.1"]="0.16.1:2.1.1 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.1.0"]="0.16.0:2.1.0 11.8 12.1 cpuonly"
TORCH_CONFIGS["2.0.1"]="0.15.2:2.0.2 11.7 11.8 cpuonly"
TORCH_CONFIGS["2.0.0"]="0.15.0:2.0.0 11.7 11.8 cpuonly"
TORCH_CONFIGS["1.13.1"]="0.14.1:1.13.1 11.6 11.7 cpuonly"
TORCH_CONFIGS["1.13.0"]="0.14.0:1.13.0 11.6 11.7 cpuonly"
TORCH_CONFIGS["1.12.1"]="0.13.1:1.12.1 10.2 11.3 11.6 cpuonly"
TORCH_CONFIGS["1.12.0"]="0.13.0:1.12.0 10.2 11.3 11.6 cpuonly"

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Display available PyTorch versions with numbered options, sorted by version
echo -e "${GREEN}Available PyTorch versions:${NC}"
TORCH_KEYS=("${!TORCH_CONFIGS[@]}")
sorted_versions=$(echo "${TORCH_KEYS[@]}" | tr ' ' '\n' | sort -Vr)
version_index=1
for version in $sorted_versions; do
  echo -e "${YELLOW}[$version_index] $version${NC}"
  version_index=$((version_index + 1))
done

# Select PyTorch version
read -p "Select PyTorch version by number: " version_index
if [[ ! "$version_index" =~ ^[0-9]+$ ]] || ((version_index < 1 || version_index > ${#TORCH_KEYS[@]})); then
  echo -e "${RED}Invalid selection.${NC}"
  exit 1
fi
selected_version=$(echo "$sorted_versions" | sed -n "${version_index}p")

# Get corresponding torchvision, torchaudio versions and available CUDA versions
torchvision_version=$(echo "${TORCH_CONFIGS[$selected_version]}" | cut -d' ' -f1 | cut -d':' -f1)
torchaudio_version=$(echo "${TORCH_CONFIGS[$selected_version]}" | cut -d' ' -f1 | cut -d':' -f2)
available_cudas=$(echo "${TORCH_CONFIGS[$selected_version]}" | cut -d' ' -f2-)

# Display available CUDA versions with numbered options
echo -e "${GREEN}Available CUDA versions for PyTorch $selected_version:${NC}"
CUDA_OPTIONS=($available_cudas)
for i in "${!CUDA_OPTIONS[@]}"; do
  echo -e "${YELLOW}[$((i + 1))] ${CUDA_OPTIONS[$i]}${NC}"
done

# Select CUDA version
read -p "Select CUDA version by number: " cuda_index
if [[ ! "$cuda_index" =~ ^[0-9]+$ ]] || ((cuda_index < 1 || cuda_index > ${#CUDA_OPTIONS[@]})); then
  echo -e "${RED}Invalid selection.${NC}"
  exit 1
fi
selected_cuda="${CUDA_OPTIONS[$((cuda_index - 1))]}"

# Display available Conda environments with numbered options or create a new one
echo -e "${GREEN}Available Conda environments:${NC}"
ENV_OPTIONS=($(conda env list | awk '{print $1}' | tail -n +4))
for i in "${!ENV_OPTIONS[@]}"; do
  echo -e "${YELLOW}[$((i + 1))] ${ENV_OPTIONS[$i]}${NC}"
done
echo -e "${YELLOW}[$(( ${#ENV_OPTIONS[@]} + 1 ))] Create a new environment${NC}"

# Select Conda environment
read -p "Select Conda environment by number (or enter a new name): " env_index
if [[ "$env_index" =~ ^[0-9]+$ ]] && ((env_index >= 1 && env_index <= ${#ENV_OPTIONS[@]})); then
  env_name="${ENV_OPTIONS[$((env_index - 1))]}"
elif [[ "$env_index" == $(( ${#ENV_OPTIONS[@]} + 1 )) ]]; then
  read -p "Enter new Conda environment name: " env_name
  echo -e "${GREEN}Creating new Conda environment '$env_name'...${NC}"
  conda create -n "$env_name" -y
else
  echo -e "${RED}Invalid selection.${NC}"
  exit 1
fi

# Activate Conda environment and install PyTorch
echo -e "${GREEN}Installing PyTorch $selected_version with CUDA $selected_cuda in Conda environment '$env_name'...${NC}"
if [[ "$selected_cuda" == "cpuonly" ]]; then
  conda install -n "$env_name" pytorch=="$selected_version" torchvision=="$torchvision_version" torchaudio=="$torchaudio_version" cpuonly -c pytorch -y
else
  conda install -n "$env_name" pytorch=="$selected_version" torchvision=="$torchvision_version" torchaudio=="$torchaudio_version" pytorch-cuda="$selected_cuda" -c pytorch -c nvidia -y
fi

echo -e "${GREEN}Installation complete.${NC}"