#!/usr/bin/env zsh

autoload -Uz colors
colors

typeset TMPFILE="/tmp/autojump-install-$$$RANDOM"
typeset ERROR_FILE="/tmp/autojump-install-$$$RANDOM"

spin() {
  local \
    before_msg="$1" \
    after_msg="$2"
  local spinner
  local -a spinners
  spinners=(⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏)

  # hide cursor
  tput civis

  while true; do
    for spinner in "${spinners[@]}"; do
      if [[ -f $TMPFILE ]]; then
        rm -f $TMPFILE
        tput cnorm
        return 1
      fi
      sleep 0.05
      printf " $fg[white]$spinner$reset_color  $before_msg\r" 2>/dev/null
    done

    [ $#jobstates = 0 ] && break
  done

  if [[ -n $after_msg ]]; then
    printf "\033[2K"
    printf " $fg_bold[blue]\U2714$reset_color  $after_msg\n"
  fi 2>/dev/null

  # show cursor
  tput cnorm || true
}

execute() {
  local arg title error
  local -a args errors

  while (($# > 0)); do
    case "$1" in
    --title)
      title="$2"
      shift
      ;;
    --error)
      errors+=("$2")
      shift
      ;;
    -* | --*)
      return 1
      ;;
    *)
      args+=("$1")
      ;;
    esac
    shift
  done

  {
    for arg in "${args[@]}"; do
      ${~${=arg}} &>$ERROR_FILE
      # When an error causes
      if [[ $status -ne 0 ]]; then
        # error mssages
        printf "\033[2K" 2>/dev/null
        printf \
          " $fg[yellow]\U26A0$reset_color  $title [$fg[red]FAILED$reset_color]\n" \
          2>/dev/null
        printf "$status\n" >"$TMPFILE"
        # additional error messages
        if (($#errors > 0)); then
          for error in "${errors[@]}"; do
            printf "    -> $error\n" 2>/dev/null
          done
        fi
      fi
    done
  } &

  spin \
    "$title" \
    "$title [$fg[green]SUCCEEDED$reset_color]"

  if [[ $status -ne 0 ]]; then
    printf "\033[2K" 2>/dev/null
    printf "\n $fg[yellow]\U26A0$reset_color  Error occurred, check the log for more information.\n" 2>/dev/null
    cat $ERROR_FILE
    exit 1
  fi
}

inserted_start="# >>> autojump initialize >>>"
inserted_end="# <<< autojump initialize <<<"

check() {
  sleep 1
  if [ -d "${HOME}/.autojump" ]; then
    return 1
  fi
}

install() {
  git clone https://github.com/wting/autojump.git
  cd autojump || return 1
  ./install.py -f || return 1
  cd .. || return 1
  rm autojump -r
}

config() {
  local content="[[ -s /root/.autojump/etc/profile.d/autojump.sh ]] && source /root/.autojump/etc/profile.d/autojump.sh"
  local rc_file=$1

  # Check if the marker already exists
  if grep -q "$inserted_start" "$rc_file"; then
    # If the marker exists, replace the content between markers
    sed -i --follow-symlinks "/$inserted_start/,/$inserted_end/c\\$inserted_start\n$content\n$inserted_end" "$rc_file" || return 1
  else
    # If no marker exists, append the content with markers
    {
      echo "\n$inserted_start"
      echo "$content"
      echo "$inserted_end"
    } >>"$rc_file" || return 1
  fi

  return
}

execute \
  --title "Checking if ${HOME}/.autojump already exist" \
  --error "The ${HOME}/.autojump folder already exists." \
  --error "(Caution) You should remove it before continue." \
  "check"

execute \
  --title "Installing autojump from source to ${HOME}/.autojump" \
  --error "Failed to install autojump" \
  "install"

execute \
  --title "Writing config to rc files" \
  "config ${HOME}/.zshrc && config ${HOME}/.bashrc"

printf " All processes are successfully completed \U1F389\n"
