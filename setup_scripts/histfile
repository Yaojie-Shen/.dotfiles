#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[1;32m'
CYAN='\033[1;36m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Usage function to display help information
usage() {
  echo "Usage: $0 [shell]"
  echo ""
  echo "Options:"
  echo "  --help           Show this help message and exit."
  echo "  shell            The shell to configure (e.g., bash, zsh)."
  echo ""
  echo "Description:"
  echo "  This script sets the history file for a specified shell by modifying the corresponding rc file."
  echo "  If no shell is provided, the script will prompt for a valid shell interactively."
  exit 0
}

# Check for --help option
if [[ "$1" == "--help" ]]; then
  usage
fi

# Default shell
shell="${1}"
rc_file="${HOME}/.${shell}rc"
inserted_start="\n# >>> custom history initialization >>>"
inserted_end="# <<< custom history initialization <<<\n"

# Function to check if the shell is valid
is_valid_shell() {
  if [[ -f "${rc_file}" ]]; then
    return 0
  else
    return 1
  fi
}

# Prompt user for shell if not valid
while ! is_valid_shell; do
  if [[ -n "${shell}" ]]; then
    echo -e "${RED}Error:${NC} No valid rc file found for shell '${shell}'."
  fi
  read -p "$(echo -e ${CYAN}Enter a valid shell \(e.g., bash, zsh\): ${NC})" shell
  rc_file="${HOME}/.${shell}rc"
done

# Function to prompt for yes/no response
prompt_yes_no() {
  local prompt="$1"
  local yn
  while true; do
    printf "${CYAN}$prompt [y/n]: ${NC}"
    read -r -n 1 yn
    echo
    case $yn in
      [Yy]*) return 0 ;;
      [Nn]*) return 1 ;;
      *) echo -e "${YELLOW}Please answer y or n.${NC}" ;;
    esac
  done
}

# Confirmation to proceed
echo -e "${GREEN}Setting history file for shell: $shell${NC}"
if ! prompt_yes_no "Continue?"; then
  echo -e "${RED}Abort.${NC}"
  exit 1
fi

# Function to update rc file
update_rc_file() {
  local content="export HISTFILE='${DEVBOX_ROOT}/cache/.${shell}_history'"

  # Check if the marker already exists
  if grep -q "$inserted_start" "$rc_file"; then
    # If the marker exists, replace the content between markers
    sed -i "/$inserted_start/,/$inserted_end/c\\$inserted_start\n$content\n$inserted_end" "$rc_file"
  else
    # If no marker exists, append the content with markers
    {
      echo "$inserted_start"
      echo "$content"
      echo "$inserted_end"
    } >> "$rc_file"
  fi

  echo -e "${GREEN}History file setting updated in ${rc_file}.${NC}"
}

# Perform the update
update_rc_file
